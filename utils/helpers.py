# utils/helpers.py
import base64
import mimetypes
import logging
import os

import aiohttp
import requests
from aiogram import Bot, types

import config
from data.constants import DURATION_PRICES


def calculate_generation_cost(model: str, duration: str, pixverse_mode: str = None,
                              resolution: str = None) -> int | None:
    if model == 'Sora - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π':
        from data.constants import IMAGE_GPT_COST
        return IMAGE_GPT_COST

    if model == "Pixverse v4.5":
        res = resolution if resolution else "720p"
        mode = pixverse_mode if pixverse_mode else "smooth"
        key = f"{res}_{mode}_{duration}"
        return DURATION_PRICES[model].get(key)

    return DURATION_PRICES.get(model, {}).get(duration)

def get_crystal_price_str(cost: int | None) -> str:
    if cost is None:
        return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    return f"{cost} üíé"

def download_video(url: str, filename: str) -> str:
    r = requests.get(url, stream=True)
    r.raise_for_status()
    with open(filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=8192):
            f.write(chunk)
    return filename

def _image_to_data_uri(file_path: str) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Data URI (base64)."""
    mime_type, _ = mimetypes.guess_type(file_path)
    if not mime_type or not mime_type.startswith('image'):
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME-—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
    with open(file_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    return f"data:{mime_type};base64,{encoded_string}"

async def check_user_op_single(bot: Bot, target_chat_id: str, user_id: int) -> bool:
    async with aiohttp.ClientSession() as session:
        if ':' in target_chat_id:

            api_url = f"https://api.telegram.org/bot{target_chat_id}/getChatMember"
            payload = {
                "chat_id": user_id,
                "user_id": user_id
            }
            async with session.post(api_url, data=payload, ssl=False) as resp:
                data = await resp.json()

            status = data["ok"]
            if not status:
                return False

        else:

            member = await bot.get_chat_member(target_chat_id, user_id)
            if member.status == 'left':
                return False

    return True

async def check_user_op(db, bot: Bot, user_id: int):
    all_op = await db.subscription.get_all_channels()
    if not all_op:
        return None

    async with aiohttp.ClientSession() as session:
        for pare in all_op:
            if ':' in pare.chat_id:
                api_url = f"https://api.telegram.org/bot{pare.chat_id}/getChatMember"
                payload = {
                    "chat_id": user_id,
                    "user_id": user_id
                }
                async with session.post(api_url, data=payload, ssl=False) as resp:
                    data = await resp.json()

                status = data["ok"]
                if not status:
                    return pare.id, pare.link_channel

            else:

                member = await bot.get_chat_member(pare.chat_id, user_id)
                if member.status == 'left':
                    return pare.id, pare.link_channel

    return None


async def upload_image_to_imgbb(image_path: str) -> str | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ ImgBB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL."""
    if not config.IMGBB_API_KEY:
        logging.error("–ö–ª—é—á API –¥–ª—è ImgBB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return None

    with open(image_path, 'rb') as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode("utf-8")

    data = {
        'key': config.IMGBB_API_KEY,
        'image': encoded_image,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.imgbb.com/1/upload", data=data, ssl=False) as response:
            if response.status == 200:
                response_data = await response.json()
                image_url = response_data['data']['url']
                logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ ImgBB: {image_url}")
                return image_url
            else:
                try:
                    response_data = await response.json()
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ImgBB: {response_data}")
                except aiohttp.ContentTypeError:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ImgBB: {response.status} {await response.text()}")
                return None


async def download_and_upload_images(
        bot: Bot,
        album: list[types.Message]
) -> list[str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Telegram, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –Ω–∞ ImgBB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π (album).
    """
    urls = []

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –ª–æ–≥–∏–∫—É, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å album
    messages_to_process = album

    if len(messages_to_process) > 10:
        raise ValueError("–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.")

    for msg in messages_to_process:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ –∞–ª—å–±–æ–º–µ –±—ã–ª —Ç–µ–∫—Å—Ç)
        if not msg.photo:
            continue

        photo_obj = msg.photo[-1]
        temp_photo_path = f"temp_{photo_obj.file_unique_id}.jpg"

        try:
            await bot.download(file=photo_obj.file_id, destination=temp_photo_path)

            image_url = await upload_image_to_imgbb(temp_photo_path)
            if image_url:
                urls.append(image_url)
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ ImgBB —Ñ–∞–π–ª: {temp_photo_path}")

        finally:
            if os.path.exists(temp_photo_path):
                os.remove(temp_photo_path)

    # –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –≤–µ—Ä–Ω–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return urls