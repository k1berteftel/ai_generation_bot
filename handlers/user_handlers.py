# handlers/user_handlers.py
import html
import os
import asyncio
import logging
import json
from typing import Callable, Any, Awaitable

from aiogram import Router, F, types, Bot, BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, Message, InputMediaPhoto, \
    LabeledPrice, SuccessfulPayment, PreCheckoutQuery
from yookassa import Payment

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
import config
from database.database import Database
from data.constants import *
from keyboards.inline import (
    get_main_menu_keyboard, get_account_keyboard, aspect_menu, balance_rubles_menu, balance_choose_menu,
    balance_stars_menu,
    url_button, json_to_keyboard, model_menu, get_prompt_keyboard, duration_menu,
    subscribe_button_keyboard, get_exemple_keyboard, get_student_menu,
    USER_MODELS, USER_DURATIONS, USER_PIXVERSE_MODE, USER_ASPECT_RATIO
)
from services.nexus_api import generate_on_nexus
from services.replicate_api import generate_replicate_async
from services.payment_service import check_payment
from utils.helpers import calculate_generation_cost, get_crystal_price_str, download_video, check_user_op, \
    download_and_upload_images, check_user_op_single
from utils.chat_gpt import get_text_answer, get_assistant_and_thread
from APIKeyManager.apikeymanager import APIKeyManager

user_router = Router()


class AlbumMiddleware(BaseMiddleware):
    album_data: dict[str, list[Message]] = {}

    def __init__(self, latency: int | float = 0.1):
        self.latency = latency

    async def __call__(
            self,
            handler: Callable[[Message, dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: dict[str, Any],
    ) -> Any:
        if not event.media_group_id:
            data["album"] = [event]
            return await handler(event, data)

        group_id = event.media_group_id
        if group_id not in self.album_data:
            self.album_data[group_id] = [event]
            await asyncio.sleep(self.latency)
            data["album"] = self.album_data.pop(group_id)
            return await handler(event, data)

        self.album_data[group_id].append(event)
        return


user_router.message.middleware(AlbumMiddleware())


class GenStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_aspect = State()


class DialogStates(StatesGroup):
    waiting_for_prompt = State()


async def prompt_menu(user_id, selected_model):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞."""
    durations = MODEL_DURATIONS.get(selected_model, ["5 —Å–µ–∫"])
    current_duration = USER_DURATIONS.get(user_id, durations[0])
    aspect = USER_ASPECT_RATIO.get(user_id, "16:9")

    if selected_model == 'Veo3 - –≤–∏–¥–µ–æ —Å—Ü–µ–Ω–∞—Ä–∏—é':
        prompt_lines = [
            "üí¨ –ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.",
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞.",
            "",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{get_crystal_price_str(VEO_COST)}</b>"
        ]
        text = "\n".join(prompt_lines)
        keyboard = get_prompt_keyboard(user_id, selected_model)
        return text, keyboard

    if selected_model == 'Sora - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏':
        prompt_lines = [
            "üí¨ –ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).",
            "",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{get_crystal_price_str(IMAGE_GPT_COST)}</b>"
        ]
        text = "\n".join(prompt_lines)
        keyboard = get_prompt_keyboard(user_id, selected_model)
        return text, keyboard

    prompt_lines = [
        "üí¨ –ù–∞–ø–∏—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:", "",
        f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: <b>{aspect}</b>",
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{current_duration}</b>",
    ]

    pixverse_mode = None
    resolution = "720p"  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
    if selected_model == "Pixverse v4.5":
        pixverse_mode = USER_PIXVERSE_MODE.get(user_id, "smooth")
        prompt_lines.append(f"–†–µ–∂–∏–º: <b>{'Smooth' if pixverse_mode == 'smooth' else 'Normal'}</b>")

    cost = calculate_generation_cost(selected_model, current_duration, pixverse_mode, resolution)
    prompt_lines.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{get_crystal_price_str(cost)}</b>")

    text = "\n".join(prompt_lines)
    keyboard = get_prompt_keyboard(user_id, selected_model)
    return text, keyboard


async def example_menu(selected_model: str) -> tuple:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º, –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model = MODELS_EXAMPLE_OBJECT[selected_model]
    url = model.get("manual")
    example = model.get("examples")[0]
    text = (f'{model.get("name")}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <em>{model.get("description")}</em>\n\n'
            f'<u>{example.get("name") if example.get("name") else ""}</u>'
            f'{example.get("prompt")}\n\nüîó–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {url}')
    media = FSInputFile(path=example.get('media'))
    keyboard = get_exemple_keyboard(url)
    return text, [media, example.get("content_type")], keyboard


async def message_start(message: types.Message, db: Database, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ –∞–¥–º–∏–Ω–∫–µ."""
    copy_message = await db.start_message.get_message()
    if copy_message:
        keyboard = None
        if copy_message.reply_markup:
            try:
                keyboard_data = json.loads(copy_message.reply_markup)
                keyboard = await json_to_keyboard(keyboard_data)
            except (json.JSONDecodeError, TypeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ JSON: {e}")

        await asyncio.sleep(copy_message.delay_seconds)

        await bot.copy_message(
            message_id=copy_message.message_id,
            chat_id=message.chat.id,
            from_chat_id=copy_message.chat_id,
            reply_markup=keyboard
        )


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@user_router.message(Command("start"))
async def cmd_start(message: types.Message, db: Database, state: FSMContext, bot: Bot):
    await state.clear()

    parts = message.text.split(' ', 1)
    param = parts[1] if len(parts) > 1 else ""

    url_name = ""
    ref_id = None

    if param.startswith('ad_url_start_'):
        url_name = param.replace('ad_url_start_', '')
    elif param:
        try:
            ref_id = int(param)
        except Exception:
            ...


    user, is_new = await db.user.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        ad_url=url_name or None,
        ref_id=ref_id or None
    )

    if is_new and ref_id:
        try:
            ref_id = int(ref_id)
            await db.user.increase_value(ref_id, 'generations', 10)
            await db.user.increase_value(ref_id, 'ref_count', 1)
        except Exception:
            ...

    if url_name:
        if is_new:
            logging.info(f"User {user.id} is new, ad_url: {url_name}. Updating unique stats.")
            await db.ad_url.increment_counters(name=url_name, all_users=1, unique_users=1)
            await db.statistic.increment_counters(name='users', now_month=1)
        else:
            logging.info(f"User {user.id} is existing, ad_url: {url_name}. Updating non-unique stats.")
            await db.ad_url.increment_counters(name=url_name, all_users=1, not_unique_users=1)

    op_answer = await check_user_op(db, bot, message.from_user.id)
    if op_answer is not None:
        await message.answer(
            '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!',
            reply_markup=subscribe_button_keyboard(op_answer[0], op_answer[1])
        )
        return

    user_id = message.from_user.id
    chosen_model = USER_MODELS.get(user_id)
    model_text = f"<b>{chosen_model}</b>" if chosen_model else "<i>–Ω–µ –≤—ã–±—Ä–∞–Ω–∞</i>"
    is_unlim = await db.user.check_unlim_status(message.from_user.id)

    markup = get_main_menu_keyboard()
    if not is_new:
        text = (
            "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Super GPT!</b>\n\n"
            "ü§ñ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π "
            "–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user.generations if not is_unlim else '‚àû'}</b> üíé\n\n"
            f"<b>üìå –°–æ–≤–µ—Ç:</b> –ß—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –∫ –Ω–∞–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –∑–∞–∫—Ä–µ–ø–∏—Ç–µ –±–æ—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤. "
            f"–¢–∞–∫ –≤—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–≤–æ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é AI!"
            "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
        )
        await message.answer_photo(
            photo=FSInputFile(path='medias/super_gpt_menu.jpg'),
            caption=text, reply_markup=markup, parse_mode='HTML')
    else:
        text = ('<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SUPER GPT!</b>\n<b>–¢—ã –ø–æ–ø–∞–ª –≤ –º–∏—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è!</b>'
                '\n\n–ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 20 üíé, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö! \n\n–ù–∞—à –±–æ—Ç ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å '
                '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\n\nüé¨ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ-–¥–æ—Ä–æ–∂–∫–æ–π –∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é\n'
                'üì¢ –î–µ–ª–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ä–æ–ª–∏–∫–∏ –∏ –±–∞–Ω–Ω–µ—Ä—ã\nüñº –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–∞–º\n'
                'üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã\n‚ö°Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ—â–Ω—ã—Ö –ò–ò: Veo3, Kling v2.1, '
                'Seedance 1 Lite, Minimax, Sora\n\n<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:</b>\n\n- –ü–æ–ª—É—á–∏ 20 –∞–ª–º–∞–∑–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ –ø–æ–¥–∞—Ä–æ–∫!\n'
                '- –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å, –∞ —Ç–∞–∫–∂–µ —à–∞–Ω—Å 1 —Ä–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Sora.\n'
                '-–ò–ª–∏ –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –†—É–±–ª—è–º–∏ –∏–ª–∏ STARS\n\n<b>–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏? </b>'
                '\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏ –ø–æ–≥–Ω–∞–ª–∏! üöÄ')
        await message.answer(
            text=text,
            reply_markup=markup
        )

    await message_start(message, db, bot)


@user_router.callback_query(F.data == "back_main")
async def cb_back_main(callback: types.CallbackQuery, db: Database, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    user = await db.user.get_user(user_id)
    if not user:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start", show_alert=True)
        return

    chosen_model = USER_MODELS.get(user_id)
    model_text = f"<b>{chosen_model}</b>" if chosen_model else "<i>–Ω–µ –≤—ã–±—Ä–∞–Ω–∞</i>"
    is_unlim = await db.user.check_unlim_status(user_id)
    text = (
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Super GPT!</b>\n\n"
        "ü§ñ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π "
        "–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user.generations if not is_unlim else '‚àû'}</b> üíé\n\n"
        f"<b>üìå –°–æ–≤–µ—Ç:</b> –ß—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –∫ –Ω–∞–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –∑–∞–∫—Ä–µ–ø–∏—Ç–µ –±–æ—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤. "
        f"–¢–∞–∫ –≤—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–≤–æ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é AI!"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )
    markup = get_main_menu_keyboard()
    try:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=FSInputFile(path='medias/super_gpt_menu.jpg'), caption=text, reply_markup=markup)
    except Exception:
        await callback.answer()


@user_router.callback_query(F.data == "choose_model")
async def cb_choose_model(callback: types.CallbackQuery):
    text = f"–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=model_menu(), parse_mode='HTML')


@user_router.callback_query(F.data.startswith("model_"))
async def cb_model_selected(callback: types.CallbackQuery, state: FSMContext):
    model = callback.data.replace("model_", "")
    USER_MODELS[callback.from_user.id] = model
    await callback.message.delete()
    text, media_data, keyboard = await example_menu(model)
    if media_data[1] == 'photo':
        await callback.message.answer_photo(
            photo=media_data[0],
            caption=text,
            reply_markup=keyboard
        )
    if media_data[1] == 'video':
        await callback.message.answer_video(
            video=media_data[0],
            caption=text,
            reply_markup=keyboard
        )
    if media_data[1] == 'gif':
        await callback.message.answer_animation(
            animation=media_data[0],
            caption=text,
            reply_markup=keyboard
        )


@user_router.callback_query(F.data == 'start_chat')
async def start_gpt_chat(callback: types.CallbackQuery, state: FSMContext):
    assistant_id, thread_id = await get_assistant_and_thread()
    await state.update_data(assistant_id=assistant_id, thread_id=thread_id)
    await state.set_state(DialogStates.waiting_for_prompt)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚úñÔ∏è', callback_data='back_main')]])
    text = ('ü§ñ SUPER GPT –∞–∫—Ç–∏–≤–µ–Ω!\n\n–Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å –∏–¥–µ—è–º–∏'
            '\n–°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=FSInputFile(path='medias/start_gpt.jpg'),
        caption=text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@user_router.message(DialogStates.waiting_for_prompt)
async def answer_gpt(message: types.Message, state: FSMContext):
    try:
        await message.bot.edit_message_reply_markup(
            chat_id=message.from_user.id,
            message_id=message.message_id - 1
        )
    except Exception:
        ...
    msg_to_del = await message.answer('‚úçÔ∏è')
    state_data = await state.get_data()
    assistant_id, thread_id = state_data.get('assistant_id'), state_data.get('thread_id')
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚úñÔ∏è', callback_data='back_main')]])
    prompt = message.text if message.text else message.caption
    answer = await get_text_answer(prompt, assistant_id, thread_id)
    if answer is None:
        answer = '‚ùóÔ∏è–í–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    await msg_to_del.delete()
    await message.answer(answer, reply_markup=keyboard)


@user_router.callback_query(F.data == 'for_students')
async def open_students_menu(callback: types.CallbackQuery):
    text = '–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é —Å–æ–±—Ä–∞–Ω—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å —É—á–µ–±–æ–π:'  # —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ qwen
    keyboard = get_student_menu()
    await callback.message.delete()
    await callback.message.answer(text=text, reply_markup=keyboard, parse_mode='HTML')


@user_router.callback_query(F.data == "start_gen")  # —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def cb_start_gen(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    model = USER_MODELS.get(user_id)

    USER_MODELS[callback.from_user.id] = model
    text, keyboard = await prompt_menu(callback.from_user.id, model)
    await state.set_state(GenStates.waiting_for_prompt)
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@user_router.callback_query(F.data == "choose_aspect", GenStates.waiting_for_prompt)
async def cb_choose_aspect(callback: types.CallbackQuery, state: FSMContext):
    aspect = USER_ASPECT_RATIO.get(callback.from_user.id, "16:9")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:",
        reply_markup=aspect_menu(aspect)
    )
    await state.set_state(GenStates.waiting_for_aspect)


@user_router.callback_query(F.data.startswith("aspect_"), GenStates.waiting_for_aspect)
async def cb_aspect_selected(callback: types.CallbackQuery, state: FSMContext):
    aspect = callback.data.replace("aspect_", "")
    user_id = callback.from_user.id
    USER_ASPECT_RATIO[user_id] = aspect
    selected_model = USER_MODELS.get(user_id)
    if not selected_model:
        await cb_back_main(callback, state)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        return

    prompt_text, prompt_kb = await prompt_menu(user_id, selected_model)
    await callback.message.edit_text(prompt_text, reply_markup=prompt_kb, parse_mode='HTML')
    await state.set_state(GenStates.waiting_for_prompt)


@user_router.callback_query(F.data == "choose_duration", GenStates.waiting_for_prompt)
async def cb_choose_duration(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    selected_model = USER_MODELS.get(user_id)
    if not selected_model: return
    await callback.message.edit_reply_markup(reply_markup=duration_menu(selected_model, user_id))


@user_router.callback_query(F.data.startswith("set_duration_"), GenStates.waiting_for_prompt)
async def cb_set_duration(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    selected_model = USER_MODELS.get(user_id)
    if not selected_model: return

    d = callback.data.replace("set_duration_", "")
    USER_DURATIONS[user_id] = d

    prompt_text, prompt_kb = await prompt_menu(user_id, selected_model)
    await callback.message.edit_text(prompt_text, reply_markup=prompt_kb, parse_mode='HTML')


@user_router.callback_query(F.data == "back_to_prompt")
async def cb_back_to_prompt(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    selected_model = USER_MODELS.get(user_id)
    if not selected_model: return

    prompt_text, prompt_kb = await prompt_menu(user_id, selected_model)
    await callback.message.edit_text(prompt_text, reply_markup=prompt_kb, parse_mode='HTML')
    await state.set_state(GenStates.waiting_for_prompt)


@user_router.callback_query(F.data == "toggle_pixverse_mode", GenStates.waiting_for_prompt)
async def cb_toggle_pixverse_mode(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    selected_model = USER_MODELS.get(user_id)
    if not selected_model: return

    current = USER_PIXVERSE_MODE.get(user_id, "smooth")
    USER_PIXVERSE_MODE[user_id] = "normal" if current == "smooth" else "smooth"

    prompt_text, prompt_kb = await prompt_menu(user_id, selected_model)
    await callback.message.edit_text(prompt_text, reply_markup=prompt_kb, parse_mode='HTML')


@user_router.callback_query(F.data == "telegram_stars_callback")
async def balance_method_choose_payment_func(call: types.CallbackQuery):
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', reply_markup=balance_stars_menu())


@user_router.callback_query(F.data == "bank_card_callback")
async def balance_method_choose_payment_func(call: types.CallbackQuery):
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', reply_markup=balance_rubles_menu())


@user_router.callback_query(F.data == "balance")
async def cb_balance(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=balance_choose_menu())


@user_router.callback_query(F.data.startswith("buy_rub_"))
async def buy_generations_rubles_menu(callback: types.CallbackQuery, db: Database):
    amount_str = callback.data.replace("buy_rub_", "")
    amount = 'unlim' if amount_str == 'unlim' else int(amount_str)
    price = RUB_PRICES[amount]

    payment = Payment.create({
        "amount": {
            "value": price,
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://web.telegram.org"
        },
        "capture": True,
        "description": f'–ü–æ–∫—É–ø–∫–∞ {amount} –ì–µ–Ω–µ—Ä–∞—Ü–∏–π ID: {callback.from_user.id}',
        'receipt': {"customer": {
            "email": 'danila.timonin12@mail.ru',
        },
            'items': [{
                "description": f'–ü–æ–∫—É–ø–∫–∞ {amount} –ù–µ–π—Ä–æ-–∫–æ–∏–Ω–æ–≤',
                "quantity": 1.00,
                "amount": {
                    "value": str(price),
                    "currency": "RUB"
                },
                "vat_code": 1,
                "payment_mode": "full_prepayment",
                "payment_subject": "another"
            }]}
    })

    payment_data = json.loads(payment.json())
    payment_id = payment_data['id']
    payment_url = (payment_data['confirmation'])['confirmation_url']

    await callback.message.answer(
        f"<b>{price}‚ÇΩ –°–ß–Å–¢</b>\n–ü–æ–∫—É–ø–∫–∞ {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        f"{'–ê–∫—Ç–∏–≤–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏' if amount == 'unlim' else ''}\n"
        "<i>–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç</i>",
        reply_markup=url_button(payment_url),
        parse_mode='HTML'
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(process_successful_payment(payment_id, callback, db, amount, price))
    await callback.answer()


@user_router.callback_query(F.data.startswith('buy_stars_'))
async def buy_generations_stars_menu(call: types.CallbackQuery):
    amount_str = call.data.replace("buy_stars_", "")
    amount = 'unlim' if amount_str == 'unlim' else int(amount_str)

    prices = [LabeledPrice(label="XTR", amount=STARS_PRICES[amount])]

    payload = str(amount)
    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {"‚ôæÔ∏è" if amount == "unlim" else amount}',
        description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {"‚ôæÔ∏è" if amount == "unlim" else amount}',
        prices=prices,
        provider_token="",
        payload=payload,
        currency="XTR"
    )


async def process_successful_payment(payment_id, callback, db, amount, price):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    is_paid, _ = await check_payment(payment_id)
    if is_paid:
        user_id = callback.from_user.id
        if amount == 'unlim':
            await db.user.grant_unlim_access(user_id)
            await db.user.increase_value(user_id, 'generations', 50)
        else:
            user = await db.user.get_user(user_id)
            if user.ref_id:
                await db.user.increase_value(user.ref_id, 'generations', round(amount * 0.1))
            await db.user.increase_value(user_id, 'generations', amount)

        await db.statistic.increment_counters('income', all_time=price, now_month=price)
        ad_url = await db.user.get_user_value(user_id, 'ad_url')
        if ad_url:
            await db.ad_url.increment_counters(ad_url, income=int(price))

        await callback.message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!')


@user_router.callback_query(F.data == "account")
async def cb_account(callback: types.CallbackQuery, db: Database):
    user_id = callback.from_user.id
    is_unlim = await db.user.check_unlim_status(user_id)
    user = await db.user.get_user(user_id)
    if not user:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start", show_alert=True)
        return
    text = (
        "<b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
        f"<b>–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b> {user.generations if not is_unlim else '‚àû'} üíé\n"
        f"<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b> {user.completed}\n\n"
        f"üë•<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
        f"‚ö°Ô∏è –ü–æ–ª—É—á–∞–π—Ç–µ 10 üíé –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n‚ö°Ô∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% –æ—Ç –≤—Å–µ—Ö –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!üî•\n\n<b>‚Ä¢ –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö:</b> {user.ref_count}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: `<code>https://t.me/{config.BOT_NAME}?start={user_id}</code>`\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @ygihhb"
    )
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=get_account_keyboard(user_id), parse_mode="HTML")


@user_router.message(GenStates.waiting_for_prompt, F.content_type.in_({'text', 'photo'}))
async def handle_prompt(
        message: types.Message,
        state: FSMContext,
        db: Database,
        bot: Bot,
        album: list[types.Message]
):
    user_id = message.from_user.id
    model_key = USER_MODELS.get(user_id)
    if not model_key:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await state.clear()
        return

    # 1. –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º (–ø—Ä–æ–º–ø—Ç–æ–º)
    prompt_message = next((msg for msg in album if msg.caption or msg.text), None)
    prompt = prompt_message.caption if prompt_message and prompt_message.caption else prompt_message.text if prompt_message else None

    if not prompt:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç).")
        return

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    params = {"prompt": prompt}
    cost = 0
    image_urls = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if any(msg.photo for msg in album):
        image_urls = await download_and_upload_images(bot, album)
    if model_key == 'Sora - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π':
        cost = IMAGE_GPT_COST
        params["model_name"] = MODELS[model_key]
        if image_urls:
            params["image_urls"] = image_urls

    elif model_key == 'Veo3 - –≤–∏–¥–µ–æ —Å—Ü–µ–Ω–∞—Ä–∏—é':
        cost = VEO_COST
        params["model_name"] = MODELS[model_key]
        params["translate"] = True
        if image_urls:
            params["image_url"] = image_urls[0]

    else:
        aspect_ratio = USER_ASPECT_RATIO.get(user_id, "16:9")
        if model_key in MODEL_DURATIONS:
            duration_str = USER_DURATIONS.get(user_id, MODEL_DURATIONS[model_key][0])
            cost = calculate_generation_cost(model_key, duration_str)
            params["duration"] = int(duration_str.replace(" —Å–µ–∫", ""))
        else:  # –ï—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ —É Minimax)
            cost = 999

        params["model_name"] = MODELS[model_key]
        if model_key != 'Minimax - –í–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ':
            params["aspect_ratio"] = aspect_ratio

        if image_urls:

            image_field = MODEL_IMAGE_FIELD.get(model_key)
            if image_field:
                params[image_field] = image_urls[0]
    # 3. –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    if not cost or not await db.user.process_generation(user_id, cost):
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!",
                             reply_markup=balance_choose_menu())
        return

    await state.clear()

    status_message = "‚è≥ –ü—Ä–∏–Ω—è–ª. –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å..."
    if image_urls:
        status_message = "‚è≥ –ü—Ä–∏–Ω—è–ª. –ó–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É..."

    msg = await message.answer(f"{status_message} –≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {cost} üíé")

    try:
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API
        result_urls = await generate_on_nexus(params)

        if not result_urls:
            raise RuntimeError("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

        await msg.delete()
        safe_prompt = html.escape(params["prompt"])

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if model_key == 'Sora - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏':
            media_group = [InputMediaPhoto(media=url) for url in result_urls]
            if media_group:
                media_group[0].caption = f"üñºÔ∏è <b>–ì–æ—Ç–æ–≤–æ!</b>\n<b>–ü—Ä–æ–º–ø—Ç:</b> <code>{safe_prompt}</code>"
                media_group[0].parse_mode = 'HTML'
                await bot.send_media_group(chat_id=user_id, media=media_group)
        else:  # –î–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ–º–æ–¥–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è Veo
            video_url = result_urls[0]
            caption = f"üé¨ <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n<b>–ü—Ä–æ–º–ø—Ç:</b> <code>{safe_prompt}</code>\n<b>–ú–æ–¥–µ–ª—å:</b> {model_key}"
            await message.answer_video(video_url, caption=caption, parse_mode='HTML')

        await db.statistic.increment_counters(model_key, all_time=1, now_month=1)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_key}: {e}", exc_info=True)
        await db.user.increase_value(user_id, 'generations', cost)
        await db.user.increase_value(user_id, 'completed', -1)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_main')]])
        await msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n<code>{html.escape(str(e))}</code>\n\n–í–∞—à–∏ üíé –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.", reply_markup=keyboard,
                            parse_mode='HTML')


@user_router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_q: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª—é–±–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    await pre_checkout_q.answer(ok=True)


@user_router.message(F.successful_payment)
async def successful_payment_handler(message: Message, db: Database):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars.
    """
    user_id = message.from_user.id
    logging.info(f"Successful payment from {user_id}: {message.successful_payment.invoice_payload}")

    amount = message.successful_payment.invoice_payload

    if amount == 'unlim':
        await db.user.grant_unlim_access(user_id)
        await db.user.increase_value(user_id, 'generations', 50)
    else:
        user = await db.user.get_user(user_id)
        if user.ref_id:
            await db.user.increase_value(user.ref_id, 'generations', round(int(amount) * 0.1))
        await db.user.increase_value(user_id, 'generations', int(amount))

    await message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!')


@user_router.callback_query(F.data.startswith('check_op_'))
async def check_op_user_func(call: types.CallbackQuery, db: Database, bot: Bot):
    op_id = int(call.data.replace('check_op_', ''))
    op_data = await db.subscription.get_channel_by_id(op_id)
    answer = await check_user_op_single(bot, op_data.chat_id, call.from_user.id)
    if answer:
        await db.subscription.increment_subs_count(op_id)
        await call.message.edit_text('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! ‚úÖ')
    else:
        await call.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', show_alert=True)
